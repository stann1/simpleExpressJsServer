#!/usr/bin/env node
var debug = require('debug')(`expressjs-scaffold:application`);

debug("Current environment: " + (process.env.NODE_ENV || "localdev"));

/**
 * Load module dependencies.
 */
setupDatabase()
  .then((db) => require('../data/data.init').init(db))
  .then((repository) => require('../app').init(repository))
  .then((app) => {
    // set the app version and build time, so they can be queried from the client
    var version = require('../package.json').version;
    var buildDate = process.env.EXPRESS_APP_BUILD_DATE || new Date();
    app.set('buildVersion', version);
    app.set('buildDate', buildDate);

    /**
     * Get port from environment and store in Express.
     */
    var port = normalizePort(process.env.PORT || '3001');
    app.set('port', port);
    /**
     * Create HTTP or HTTPS server.
     */
    var server = createServer(app);
    
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.timeout = 20000;
    server.on('error', (err) => onError(err, port));
    server.on('listening', () => {
        const addr = server.address();
        var bind = typeof addr === 'string'
          ? 'pipe ' + addr
          : 'port ' + addr.port;
      
        debug('Listening on ' + bind);
    });
  })
  .catch(err => {
    debug("Unhandled exception on service setup. " + err);
    process.exit(1);
  })

  
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Sets-up the server type (http/https) */
function createServer(app){
  if(process.env.USE_HTTPS === "true"){
    var https = require('https');
    var fs = require('fs');

    // as this is intended only for DEV use, you need those (same names) in the root folder of the app
    const options = {
      key: fs.readFileSync('server.key'),
      cert: fs.readFileSync('server.crt')
    }   

    debug("Setting up server over HTTPS...");
    return https.createServer(options, app);
  } else {
    var http = require('http');
    debug("Setting up server over HTTP...");
    return http.createServer(app);  
  }
  
}

/* Sets-up the db connection */
function setupDatabase(){

  return new Promise((resolve, reject) => {
    const database = {};
    debug("Initializing DB...");
    resolve(database);
  });  
}



